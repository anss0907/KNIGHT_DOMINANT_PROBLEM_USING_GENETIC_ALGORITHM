/*_______________________________________________________
Written by Muhammad Anss (2022-MC-1) on December 12,2023
_________________________________________________________

_______________________________________________________*/

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define __BOARD_SIZE__ 12
#define __EMPTY__ ' '
#define __KNIGHT__ 'O'
#define __ATTACK__ 'X'
#define __MAX__KNIGHTS__ 2*((__BOARD_SIZE__ * __BOARD_SIZE__) / 9 + 4)
#define __POP__ 500
// global variables
static int trying_knights = (__BOARD_SIZE__ * __BOARD_SIZE__) / 9 + 4;
char Boards[__POP__][__BOARD_SIZE__][__BOARD_SIZE__]; // this is for fitness function
int chromosome[__POP__][__MAX__KNIGHTS__];            // this is for random generation of population and next population
int fitness[__POP__];
const int nParents = __POP__ / 2; // half of population will be parents

/*
    I have defined following functions here
    functions summary
    1. RandButNotIn
    2. RandomPOP
    3. Board_Filler
    4. Fitness
    5. swap_int
    6. Sorting
    7. Next_POP
    8. Display_EMPTY_spaces
    9. Solution_points
    10. Solution_Board
*/
// function prototypes
int RandButNotIn(int arr[__MAX__KNIGHTS__])
{
    int x = __BOARD_SIZE__ * __BOARD_SIZE__ - __BOARD_SIZE__ - 2;
    int y = __BOARD_SIZE__ + 1;
    int z = (rand() % (x - y)) + y;
    int r = z / __BOARD_SIZE__;
    int c = z % __BOARD_SIZE__;
    if (!r || r == __BOARD_SIZE__ - 1 || !c || c == __BOARD_SIZE__ - 1)
    {
        for (int s = 0; s < trying_knights; s++)
        {
            if (arr[s] == z)
                return RandButNotIn(arr);
        }
    }
    else
        return z;
}
void RandomPOP(int chromosome[__POP__][__MAX__KNIGHTS__])
// This function will generate values of knights randomly
{
    for (int i = 0; i < __POP__; i++)
    {
        int alloted_knights = 0;
        while (alloted_knights < trying_knights)
        {
            chromosome[i][alloted_knights] = RandButNotIn(chromosome[i]);
            alloted_knights++;
        }
    }
}
void Board_Filler(char Boards[__POP__][__BOARD_SIZE__][__BOARD_SIZE__], int chromosome[__POP__][__MAX__KNIGHTS__])
// This function will mark the attacks of the knights
{ // reseting the board
    for (int p = 0; p < __POP__; p++)
    {
        for (int r = 0; r < __BOARD_SIZE__; r++)
        {
            for (int c = 0; c < __BOARD_SIZE__; c++)
                Boards[p][r][c] = __EMPTY__;
        }
    }
    // positioning Knights
    for (int pop = 0; pop < __POP__; pop++)
    {
        for (int k = 0; k < trying_knights; k++)
        {
            int row = chromosome[pop][k] / __BOARD_SIZE__;
            int col = chromosome[pop][k] % __BOARD_SIZE__;
            Boards[pop][row][col] = __KNIGHT__;
        }
    }
    for (int p = 0; p < __POP__; p++)
    {
        for (int r = 0; r < __BOARD_SIZE__; r++)
        {
            for (int c = 0; c < __BOARD_SIZE__; c++)
            {
                if (Boards[p][r][c] == __KNIGHT__)
                { // 8 cases of knight attacks
                    int a = 2;
                    int b = -1;
                    for (int iter = 0; iter < 8; iter++)
                    {
                        if (iter == 8 / 2)
                        {
                            a = 1;
                            b = -2;
                        }
                        if (iter % 2)
                            a = -a;
                        else
                            b = -b;
                        if (r + a >= 0 && c + b >= 0 && r + a < __BOARD_SIZE__ && c + b < __BOARD_SIZE__ && Boards[p][r + a][c + b] != __KNIGHT__)
                            Boards[p][r + a][c + b] = __ATTACK__;
                    }
                }
            }
        }
    }
}
void Fitness(char Boards[__POP__][__BOARD_SIZE__][__BOARD_SIZE__], int fitness[__POP__])
/*This function will measure the fitness of chroms generated by
RandomPOP funciton*/
/* This function will check how much empty spaces are there
in the board will store fitness of each chrom in the fitness array*/

{
    int empty_spaces = 0;
    for (int p = 0; p < __POP__; p++)
    {
        for (int r = 0; r < __BOARD_SIZE__; r++)
        {
            for (int c = 0; c < __BOARD_SIZE__; c++)
            {
                if (Boards[p][r][c] == __EMPTY__)
                    empty_spaces++;
            }
        }
        fitness[p] = empty_spaces;
        empty_spaces = 0;
    }
}
// till now we have generated the population
// we have marked the attacks
// we have calculated the fitness
// now we will select the parents
// parents will those who have less emply spaces
// they will be selected in Fitness function

// i will sort the chrom and fitness array on the basis of empty spaces

void swap_int(int *a, int *b)
// This the simple function used to swap the values
// i checked it will work for arrays elements
// while calling this function will use like swap(&arr[0],&arr[1]);
// i know array are pointers but there elements will be treated as integers
// so we will use this function
// this function is only for integers
// this function will be used in sorting
{
    int temp = *a;
    *a = *b;
    *b = temp;
}
void Sorting(int fitness[__POP__], int chromosome[__POP__][__MAX__KNIGHTS__])
{
    // Bubble sort the population
    // we will have fittest at start
    // meaning least empty spaces will be at start

    // for sorting
    // we will first assume the first element is the fittest
    for (int sp = 0; sp < __POP__; sp++)
    {
        for (int b = sp + 1; b < __POP__; b++)
        {
            if (fitness[sp] > fitness[b])
            {
                swap_int(&fitness[sp], &fitness[b]);
                // now we will swap the chroms
                // but the important part here
                // the whole 2D array within chroms should be swapped
                for (int knights = 0; knights < trying_knights; knights++)
                    swap_int(&chromosome[sp][knights], &chromosome[b][knights]);
            }
        }
    }
}
/* now the chrom is sorted on the basis of empty spaces
 and combination with less empty spaces will be at start
 now we will select first of the combinations as parents
 and will perform cross over and mutation on them
 new generation will born*/
void Next_POP(int chromosome[__POP__][__MAX__KNIGHTS__])
{
    // Parent selection
    // survival of the fitest
    // so we choose first half of the population as parents
    // and will perform cross over and mutation on them

    // now we will perform cross over
    for (int k = 0; k < nParents; k++)
    {
        if (k % 2)
        {
            for (int i = 0; i < trying_knights; i += 2)
            {
                // odd parents will take even values from odd parents
                chromosome[nParents + k][i] = chromosome[k + 1][i];
            }
            for (int i = 1; i < trying_knights; i += 2)
            {
                // odd parents will take odd values from even parents
                chromosome[nParents + k][i] = chromosome[k][i];
            }
        }
        else
        {
            for (int i = 0; i < trying_knights; i += 2)
            {
                // even childs will take even values from even parents
                chromosome[nParents + k][i] = chromosome[k][i];
            }
            for (int i = 1; i < trying_knights; i += 2)
            {
                // even childs will take odd values from odd parents
                chromosome[nParents + k][i] = chromosome[k + 1][i];
            }
        }
    }

    // after that we will perform mutation on the new generation
    for (int pop = 2; pop < __POP__; pop++)
    { // loop control variable pop starts from 2 because i don't wanna loose my first 2 fittest pops
        int checker_for_redundant_value = 0;
        int index = (rand() % trying_knights);
        int value = RandButNotIn(chromosome[pop]);
        chromosome[pop][index] = value;
        // this will give 1 random value to each population
    }
}
void Display_EMPTY_spaces(int fitness[__POP__])
/* This is for debugging purposes
will tell us the difference between next gen and previous gen*/
{
    for (int pop = 0; pop < __POP__; pop++)
    {
        printf("%d", fitness[pop]);
        if (pop != __POP__ - 1)
            printf(",");
        if (pop % 10 == 0)
            printf("\n");
    }
    printf("\n");
}
void Solution_points(char sol[__BOARD_SIZE__][__BOARD_SIZE__])
{
    printf("Knights were placed at the following positions:\n");
    int found_knights = 0;
    for (int r = 0; r < __BOARD_SIZE__; r++)
    {
        for (int c = 0; c < __BOARD_SIZE__; c++)
        {
            if (sol[r][c] == __KNIGHT__)
            {
                printf("(%d,%d)", r + 1, c + 1);
                found_knights++;
                found_knights == trying_knights - 1 ? printf("and ") : printf(",");
            }
        }
    }
    printf("\nNo. of knights in this solution = %d\n", found_knights);
}
void print_line(int count)
{
    printf("\n");
    for (int i = 0; i < count * 3 + 3; i++)
    {
        printf("-");
    }
    printf("\n");
}
void Solution_Board(char sol[__BOARD_SIZE__][__BOARD_SIZE__])
{
    print_line(__BOARD_SIZE__);
    printf("  ");
    for (int i = 0; i < __BOARD_SIZE__; i++) // this will change
        printf("|%2d", i + 1);
    printf("|");
    print_line(__BOARD_SIZE__);
    for (int i = 0; i < __BOARD_SIZE__; i++)
    {
        printf("%2d", i + 1);
        for (int j = 0; j < __BOARD_SIZE__; j++)
        {
            if (sol[i][j] == ' ')
                printf("|%2c", sol[i][j]);
            else if (sol[i][j] == 'O')
                printf("|\033[0;31m%2c\033[0m", sol[i][j]); // red
            // change 'O' to knight soon
            else if (sol[i][j] == 'X')
                printf("|\033[0;34m%2c\033[0m", sol[i][j]); // blue
            // will change 'X' to attack soon
        }
        printf("|");
        print_line(__BOARD_SIZE__);
    }
}

// end of header file